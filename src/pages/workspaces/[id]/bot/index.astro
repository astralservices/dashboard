---
import { EyeIcon, MinusCircleIcon, MoonIcon } from "@heroicons/react/solid/esm";
import { GetRegions } from "../../../../../utils/global";
import { GetUser } from "../../../../../utils/user";
import BotLayout from "../../../../components/BotLayout.astro";
import DropdownSelect from "../../../../components/DropdownSelect.astro";
import { parse } from "twemoji-parser";
import Modal from "../../../../components/Modal.astro";
import { CloudIcon, ServerIcon } from "@heroicons/react/outline/esm";
import RegionPingChecker from "../../../../components/React/RegionPingChecker";
import { GetBotForWorkspace } from "../../../../../utils/bot";
import { GetWorkspace } from "../../../../../utils/workspace";
import Activities from "../../../../components/React/Activities";
import Switch from "../../../../components/Switch.astro";

const user = await GetUser(import.meta.env, Astro);

if (!user) {
  Astro.redirect(
    `${import.meta.env.PUBLIC_AUTH_URL}/?redirect=${Astro.canonicalURL}`
  );
}

const workspaceId = Astro.params.id as string;

const regions = await GetRegions(import.meta.env, Astro);
const workspace = await GetWorkspace(workspaceId, import.meta.env, Astro);
const bot = await GetBotForWorkspace(workspace, import.meta.env, Astro);

const botStatus = (
  status: any
): {
  color: string;
  dark: string;
  label: string;
  subtitle?: string;
  Icon?: any;
} => {
  switch (status) {
    case "online":
      return {
        color: "bg-green-500",
        dark: "bg-green-700",
        label: "Online",
      };
    case "invisible":
      return {
        color: "bg-gray-500",
        dark: "bg-gray-700",
        label: "Offline/Invisible",
        subtitle: "Not recommended. Will appear as offline to users.",
      };
    case "idle":
      return {
        color: "bg-orange-500",
        dark: "bg-orange-700",
        label: "Idle",
        Icon: MoonIcon,
      };
    case "dnd":
      return {
        color: "bg-red-500",
        dark: "bg-red-700",
        label: "Do Not Disturb",
        Icon: MinusCircleIcon,
      };
    default:
      return {
        color: "bg-gray-500",
        dark: "bg-gray-700",
        label: "Unknown",
      };
  }
};

const statuses = ["online", "invisible", "idle", "dnd"].map((status) => ({
  ...botStatus(status),
  value: status,
}));

if (!bot) {
  return Astro.redirect(`/workspaces/${workspaceId}/bot/create`);
}

const currentRegion = regions.find((r) => r.id === bot.region);
---

<BotLayout bot={bot} showSave={true}>
  <script is:inline>
    var tokenVisible = false;

    var toggleToken = () => {
      var token = document.getElementById("token");
      var tokenText = document.getElementById("tokenText");
      token.type = tokenVisible ? "password" : "text";
      tokenText.innerText = tokenVisible ? "Show" : "Hide";
      tokenVisible = !tokenVisible;
    };
  </script>
  {bot ? (
    <div class="w-full px-2">
      <div class="space-y-10">
        <div class="grid w-full grid-cols-2 gap-7">
          <div class="col-span-full">
            <h1 class="flex w-full gap-2 text-2xl font-bold">
              General Settings
            </h1>
            <p class="text-base font-semibold text-gray-800 dark:text-gray-300">
              Configure your bot's token, prefix, region, and more.
            </p>
          </div>
          <div class="col-span-full">
            <label class="text-sm font-semibold">
              Bot Token <span class="text-sm text-red-500 align-super">*</span>
            </label>
            <div class="flex mt-1 rounded-md shadow-sm">
              <div class="relative flex items-stretch flex-grow focus-within:z-10">
                <input
                  type="password"
                  name="token"
                  id="token"
                  required
                  class="block w-full border-gray-300 rounded-none dark:border-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-black-300 rounded-l-md sm:text-sm"
                  placeholder="Paste your bot token..."
                  value={bot.token}
                />
              </div>
              <button
                type="button"
                onclick="toggleToken()"
                class="relative inline-flex items-center px-4 py-2 -ml-px space-x-2 text-sm font-medium text-gray-700 border border-gray-300 rounded-r-md bg-gray-50 dark:bg-black-200 dark:border-none dark:text-white dark:hover:bg-black-400 hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500"
              >
                <EyeIcon className="w-5 h-5" />
                <span id="tokenText">Show</span>
              </button>
            </div>
          </div>

          <div class="md:col-span-1 col-span-full">
            <label class="text-sm font-semibold">Prefix</label>
            <div class="flex mt-1 rounded-md shadow-sm">
              <div class="relative flex items-stretch flex-grow focus-within:z-10">
                <input
                  type="text"
                  name="settings.prefix"
                  id="prefix"
                  required
                  class="block w-full border-gray-300 rounded-md dark:border-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-black-300 sm:text-sm"
                  placeholder="*"
                  value={bot.settings.prefix}
                />
              </div>
            </div>
          </div>

          <div class="md:col-span-1 col-span-full ">
            <label class="text-sm font-semibold">Region</label>
            <div class="grid grid-cols-4 mt-1 gap-x-2">
              <a
                class="flex justify-center w-full col-span-2 px-3 py-2 text-sm font-semibold text-center text-white rounded-md bg-astral"
                href="#region-modal"
                data-turbolinks="false"
              >
                Select Region
              </a>

              <div class="flex items-center justify-end col-span-2 space-x-2">
                <img
                  draggable="false"
                  class="w-6 h-6"
                  alt={currentRegion.prettyName}
                  src={parse(currentRegion.flag)[0].url}
                />
                <p class="text-sm font-semibold text-gray-800 dark:text-white">
                  {currentRegion.prettyName}
                </p>
              </div>
            </div>
          </div>
        </div>

        <div class="grid w-full grid-cols-2 gap-7">
          <div class="col-span-full">
            <h1 class="flex w-full gap-2 text-2xl font-bold">Status</h1>
            <p class="text-base font-semibold text-gray-800 dark:text-gray-300">
              Change your bot's status and activity.
            </p>
          </div>
          <div class="col-span-full">
            <label class="text-sm font-semibold">Status</label>
            <div class="grid grid-cols-3 mt-1">
              <a
                class="flex justify-center w-full col-span-2 px-3 py-2 text-sm font-semibold text-center text-white rounded-md bg-astral"
                href="#status-modal"
                data-turbolinks="false"
              >
                Select Status
              </a>
              <div class="flex items-center justify-end space-x-2">
                <div
                  class:list={[
                    "w-4 h-4 flex items-center justify-center rounded-full",
                    botStatus(bot.settings.status).color,
                  ]}
                >
                  <span
                    class:list={[
                      "rounded-full w-2 h-2",
                      botStatus(bot.settings.status).dark,
                    ]}
                  />
                </div>
                <p class="text-sm font-semibold text-gray-800 dark:text-white">
                  {botStatus(bot.settings.status).label}
                </p>
              </div>
            </div>
          </div>

          <Activities bot={bot} client:load />

          <div class="col-span-1">
            <label class="text-sm font-semibold">Randomize Order</label>
            <div class="flex mt-1 rounded-md">
              <Switch
                checked={bot.settings.randomizeActivities}
                name="settings.randomizeActivities"
              />
            </div>
          </div>

          <div class="col-span-1">
            <label class="text-sm font-semibold">Frequency (in seconds)</label>
            <div class="flex mt-1 rounded-md">
              <input
                type="number"
                name="settings.activityInterval"
                id="frequency"
                required
                class="block w-full border-gray-300 rounded-md dark:border-none focus:ring-indigo-500 focus:border-indigo-500 dark:bg-black-200 sm:text-sm"
                placeholder="300"
                value={bot.settings.activityInterval}
              />
            </div>
          </div>
        </div>
      </div>
      <Modal
        id="region-modal"
        title="Select Region"
        Icon={ServerIcon}
        type="success"
      >
        <div class="grid grid-cols-1 gap-px mb-2 dark:bg-black-300 md:grid-cols-2">
          {regions.map((region, i) => (
            <label for={region.id} class="cursor-pointer">
              <input
                type="radio"
                name="region"
                id={region.id}
                hidden
                class="hidden peer"
                checked={bot.region === region.id}
                value={region.id}
              />
              <div
                class:list={[
                  "flex flex-col h-full items-center py-4 peer-checked:bg-black-500 justify-center dark:bg-black-400",
                  {
                    "md:rounded-tl-md md:rounded-tr-none rounded-t-md": i === 0,
                  },
                  {
                    "md:rounded-tr-md": i === 1,
                  },
                  {
                    "md:rounded-bl-md": i === regions.length - 2,
                  },
                  {
                    "md:rounded-br-md md:rounded-bl-none rounded-b-md":
                      i === regions.length - 1,
                  },
                ]}
              >
                <img
                  draggable="false"
                  class="w-10 h-10"
                  alt={region.flag}
                  src={parse(region.flag)[0].url}
                />
                <p class="text-sm font-semibold text-gray-800 dark:text-white">
                  {region.prettyName}
                </p>
                <p class="text-xs text-gray-800 dark:text-white">
                  {region.country}
                </p>
                <p class="text-xs text-gray-800 dark:text-white">
                  {region.bots} / {region.maxBots} Bots
                </p>
              </div>
            </label>
          ))}
        </div>
        <a
          class="flex justify-center w-full px-3 py-2 text-sm font-semibold text-center text-white rounded-md bg-astral"
          href="#"
          data-turbolinks="false"
        >
          Close
        </a>
      </Modal>

      <Modal
        id="status-modal"
        title="Select Status"
        Icon={CloudIcon}
        type="success"
      >
        <div class="grid grid-cols-1 gap-px mb-2 dark:bg-black-300 md:grid-cols-2">
          {statuses.map((status, i) => (
            <label for={status.value} class="cursor-pointer">
              <input
                type="radio"
                name="settings.status"
                id={status.value}
                hidden
                class="hidden peer"
                checked={bot.settings.status === status.value}
                value={status.value}
              />
              <div
                class:list={[
                  "flex flex-col h-full items-center py-4 space-y-2 peer-checked:bg-black-500 justify-center dark:bg-black-400",
                  {
                    "md:rounded-tl-md md:rounded-tr-none rounded-t-md": i === 0,
                  },
                  {
                    "md:rounded-tr-md": i === 1,
                  },
                  {
                    "md:rounded-bl-md": i === statuses.length - 2,
                  },
                  {
                    "md:rounded-br-md md:rounded-bl-none rounded-b-md":
                      i === statuses.length - 1,
                  },
                ]}
              >
                <div
                  class:list={[
                    "w-10 h-10 flex items-center justify-center rounded-full",
                    botStatus(status.value).color,
                  ]}
                >
                  <span
                    class:list={[
                      "rounded-full w-7 h-7",
                      botStatus(status.value).dark,
                    ]}
                  />
                </div>
                <p class="text-sm font-semibold text-gray-800 dark:text-white">
                  {botStatus(status.value).label}
                </p>
                <p class="px-2 text-xs text-gray-800 dark:text-white">
                  {botStatus(status.value).subtitle}
                </p>
              </div>
            </label>
          ))}
        </div>
        <a
          class="flex justify-center w-full px-3 py-2 text-sm font-semibold text-center text-white rounded-md bg-astral"
          href="#"
          data-turbolinks="false"
        >
          Close
        </a>
      </Modal>
    </div>
  ) : (
    <p>something</p>
  )}
</BotLayout>
